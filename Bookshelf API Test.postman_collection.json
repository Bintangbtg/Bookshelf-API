{
	"info": {
		"_postman_id": "8480f7d1-9032-47f0-a10b-3842b43dd436",
		"name": "Books API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[Mandatory] Add Book With Complete Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"\tconst responseJson = pm.response.json();\r",
							"\tpm.expect(responseJson).to.haveOwnProperty('status');\r",
							"\tpm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil ditambahkan');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"    });\r",
							"\r",
							"    pm.test('response body data should contain bookId', () => {\r",
							"        const responseJson = pm.response.json();\r",
							"        const { data } = responseJson;\r",
							"        pm.expect(data).to.haveOwnProperty('bookId');\r",
							"        pm.expect(data.bookId).to.not.equals('');\r",
							"        pm.environment.set('bookId', data.bookId);\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"mariposa\",\r\n    \"year\": 2019,\r\n    \"author\": \"luluk\",\r\n    \"summary\": \"anu\",\r\n    \"publisher\": \"anu\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 100,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Add Book With Finished Reading",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 201', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"\tconst responseJson = pm.response.json();\r",
							"\tpm.expect(responseJson).to.haveOwnProperty('status');\r",
							"\tpm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil ditambahkan');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"    });\r",
							"\r",
							"    pm.test('response body data should contain bookId', () => {\r",
							"        const responseJson = pm.response.json();\r",
							"        const { data } = responseJson;\r",
							"        pm.expect(data).to.haveOwnProperty('bookId');\r",
							"        pm.expect(data.bookId).to.not.equals('');\r",
							"        pm.environment.set('bookId', data.bookId);\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"maripoca\",\r\n    \"year\": 2019,\r\n    \"author\": \"luluk\",\r\n    \"summary\": \"anu\",\r\n    \"publisher\": \"anu\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 100,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Add Book Without Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"\tconst responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');});\r",
							"    pm.test('response body should have correct property and value', () => {\r",
							"        const responseJson = pm.response.json();\r",
							"        pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"        pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"        pm.expect(responseJson).to.not.haveOwnProperty('data');\r",
							"        pm.expect(responseJson.status).to.equals('fail');\r",
							"        pm.expect(responseJson.message).to.equals('Gagal menambahkan buku. Mohon isi nama buku');});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"year\": 2019,\r\n    \"author\": \"luluk\",\r\n    \"summary\": \"anu\",\r\n    \"publisher\": \"anu\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 100,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Add Book with Page Read More Than Page Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.not.haveOwnProperty('data');\r",
							"    \r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Gagal menambahkan buku. readPage tidak boleh lebih besar dari pageCount');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"maripoca\",\r\n    \"year\": 2019,\r\n    \"author\": \"luluk\",\r\n    \"summary\": \"anu\",\r\n    \"publisher\": \"anu\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 200,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Get All Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"    \r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should have an array books and contains two items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"    \r",
							"    pm.expect(data).to.haveOwnProperty('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books).to.have.lengthOf(2);\r",
							"});\r",
							"\r",
							"pm.test('the books should have contains only id, name, and publisher property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { books } } = responseJson;\r",
							"    \r",
							"    books.forEach((book) => {\r",
							"        pm.expect(Object.keys(book)).to.have.lengthOf(3);\r",
							"        pm.expect(book).to.haveOwnProperty('id');\r",
							"        pm.expect(book).to.haveOwnProperty('name');\r",
							"        pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Get Detail Books With Correct Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should contain correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('data');\r",
							"    \r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should contain book object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"    \r",
							"    pm.expect(data).to.haveOwnProperty('book');\r",
							"    pm.expect(data.book).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('book object should contain correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { book } } = responseJson;\r",
							"    \r",
							"    pm.expect(book).to.haveOwnProperty('id');\r",
							"    pm.expect(book).to.haveOwnProperty('name');\r",
							"    pm.expect(book).to.haveOwnProperty('year');\r",
							"    pm.expect(book).to.haveOwnProperty('author');\r",
							"    pm.expect(book).to.haveOwnProperty('summary');\r",
							"    pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    pm.expect(book).to.haveOwnProperty('pageCount');\r",
							"    pm.expect(book).to.haveOwnProperty('readPage');\r",
							"    pm.expect(book).to.haveOwnProperty('finished');\r",
							"    pm.expect(book).to.haveOwnProperty('reading');\r",
							"    pm.expect(book).to.haveOwnProperty('insertedAt');\r",
							"    pm.expect(book).to.haveOwnProperty('updatedAt');\r",
							"\r",
							"    pm.expect(book.id).to.equals(pm.environment.get('bookId'));\r",
							"    pm.expect(book.name).to.equals(pm.environment.get('newName'));\r",
							"    pm.expect(book.year).to.equals(Number(pm.environment.get('newYear')));\r",
							"    pm.expect(book.author).to.equals(pm.environment.get('newAuthor'));\r",
							"    pm.expect(book.summary).to.equals(pm.environment.get('newSummary'));\r",
							"    pm.expect(book.publisher).to.equals(pm.environment.get('newPublisher'));\r",
							"    pm.expect(book.pageCount).to.equals(Number(pm.environment.get('newPageCount')));\r",
							"    pm.expect(book.readPage).to.equals(Number(pm.environment.get('newReadPage')));\r",
							"    pm.expect(book.finished).to.equals(pm.environment.get('newPageCount') === pm.environment.get('newReadPage'));\r",
							"    pm.expect(book.reading).to.equals(pm.environment.get('newReading') == 'true');\r",
							"    pm.expect(book.insertedAt).to.not.equals('');\r",
							"    pm.expect(book.updatedAt).to.not.equals('');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Get Detail Finished Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 200', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should contain correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  const { status, data } = responseJson;\r",
							"\r",
							"  pm.expect(status).to.equals('success');\r",
							"  pm.expect(data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should contain book object', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  const { data: { book } } = responseJson;\r",
							"\r",
							"  pm.expect(book).to.haveOwnProperty('id');\r",
							"  pm.expect(book).to.haveOwnProperty('name');\r",
							"  pm.expect(book).to.haveOwnProperty('year');\r",
							"  pm.expect(book).to.haveOwnProperty('author');\r",
							"  pm.expect(book).to.haveOwnProperty('summary');\r",
							"  pm.expect(book).to.haveOwnProperty('publisher');\r",
							"  pm.expect(book).to.haveOwnProperty('pageCount');\r",
							"  pm.expect(book).to.haveOwnProperty('readPage');\r",
							"  pm.expect(book).to.haveOwnProperty('finished');\r",
							"  pm.expect(book).to.haveOwnProperty('reading');\r",
							"  pm.expect(book).to.haveOwnProperty('insertedAt');\r",
							"  pm.expect(book).to.haveOwnProperty('updatedAt');\r",
							"});\r",
							"\r",
							"pm.test('book object should contain correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  const { data: { book } } = responseJson;\r",
							"\r",
							"  pm.expect(book.id).to.equals(pm.environment.get('bookIdWithFinishedReading'));\r",
							"  pm.expect(book.name).to.equals(pm.environment.get('newName'));\r",
							"  pm.expect(book.year).to.equals(Number(pm.environment.get('newYear')));\r",
							"  pm.expect(book.author).to.equals(pm.environment.get('newAuthor'));\r",
							"  pm.expect(book.summary).to.equals(pm.environment.get('newSummary'));\r",
							"  pm.expect(book.publisher).to.equals(pm.environment.get('newPublisher'));\r",
							"  pm.expect(book.pageCount).to.equals(100);\r",
							"  pm.expect(book.readPage).to.equals(100);\r",
							"  pm.expect(book.finished).to.equals(true);\r",
							"  pm.expect(book.reading).to.equals(pm.environment.get('newReading') === 'true');\r",
							"  pm.expect(book.insertedAt).to.not.equals('');\r",
							"  pm.expect(book.updatedAt).to.not.equals('');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Get Detail Books With Invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response code should be 404', () => {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should contain correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  const { status, message } = responseJson;\r",
							"\r",
							"  pm.expect(status).to.equals('fail');\r",
							"  pm.expect(message).to.equals('Buku tidak ditemukan');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books/h3bh3dh3vvd3",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"h3bh3dh3vvd3"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Update Book With Complete Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  const { status, message } = responseJson;\r",
							"\r",
							"  pm.expect(status).to.equals('success');\r",
							"  pm.expect(message).to.equals('Buku berhasil diperbarui');\r",
							"});\r",
							"\r",
							"pm.test('when get detail books', () => {\r",
							"    pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books/${pm.environment.get('bookId')}`, (error, response) => {\r",
							"    const responseJson = response.json();\r",
							"    const { data: { book} } = responseJson;\r",
							"    pm.test('book object should contain updated values', () => {\r",
							"    pm.expect(book).to.haveOwnProperty('id');\r",
							"    pm.expect(book).to.haveOwnProperty('name');\r",
							"    pm.expect(book).to.haveOwnProperty('year');\r",
							"    pm.expect(book).to.haveOwnProperty('author');\r",
							"    pm.expect(book).to.haveOwnProperty('summary');\r",
							"    pm.expect(book).to.haveOwnProperty('publisher');\r",
							"    pm.expect(book).to.haveOwnProperty('pageCount');\r",
							"    pm.expect(book).to.haveOwnProperty('readPage');\r",
							"    pm.expect(book).to.haveOwnProperty('finished');\r",
							"    pm.expect(book).to.haveOwnProperty('reading');\r",
							"    pm.expect(book).to.haveOwnProperty('insertedAt');\r",
							"    pm.expect(book).to.haveOwnProperty('updatedAt');\r",
							"    \r",
							"    pm.expect(book.id).to.equals(pm.environment.get('bookId'));\r",
							"    pm.expect(book.name).to.equals(pm.environment.get('updateName'));\r",
							"    pm.expect(book.year).to.equals(Number(pm.environment.get('updateYear')));\r",
							"    pm.expect(book.author).to.equals(pm.environment.get('updateAuthor'));\r",
							"    pm.expect(book.summary).to.equals(pm.environment.get('updateSummary'));\r",
							"    pm.expect(book.publisher).to.equals(pm.environment.get('updatePublisher'));\r",
							"    pm.expect(book.pageCount).to.equals(Number(pm.environment.get('updatePageCount')));\r",
							"    pm.expect(book.readPage).to.equals(Number(pm.environment.get('updateReadPage')));\r",
							"    pm.expect(book.finished).to.equals(pm.environment.get('updateReadPage') === pm.environment.get('updatePageCount'));\r",
							"     pm.expect(book.reading).to.equals(pm.environment.get('updateReading') == 'true');\r",
							"     pm.expect(book.insertedAt).to.not.equals('');\r",
							"      pm.expect(book.updatedAt).to.not.equals('');\r",
							"        }); \r",
							"      });\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "        {\r\n            \"name\": \"maripoca\",\r\n            \"year\": 2019,\r\n            \"author\": \"luluk\",\r\n            \"summary\": \"anu1\",\r\n            \"publisher\": \"anu\",\r\n            \"pageCount\": 100,\r\n            \"readPage\": 100,\r\n            \"finished\": true,\r\n            \"reading\": 100\r\n        }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Update Book Without Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"    });\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"\t});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"    });\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.not.haveOwnProperty('data');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Gagal memperbarui buku. Mohon isi nama buku');\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "        {\r\n            \"year\": 2019,\r\n            \"author\": \"luluk\",\r\n            \"summary\": \"anu1\",\r\n            \"publisher\": \"anu\",\r\n            \"pageCount\": 100,\r\n            \"readPage\": 100,\r\n            \"finished\": true,\r\n            \"reading\": 100\r\n        }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Update Book With Page Read More Than Page Count",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 400', () => {\r",
							"    pm.response.to.have.status(400);\r",
							"    });\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"    });\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"    });\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson).to.not.haveOwnProperty('data');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Gagal memperbarui buku. readPage tidak boleh lebih besar dari pageCount');\r",
							"\t});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "        {\r\n            \"name\": \"maripoca\",\r\n            \"year\": 2019,\r\n            \"author\": \"luluk\",\r\n            \"summary\": \"anu1\",\r\n            \"publisher\": \"anu\",\r\n            \"pageCount\": 100,\r\n            \"readPage\": 101,\r\n            \"finished\": true,\r\n            \"reading\": 100\r\n        }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Update Book with Invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 404', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"    });\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"    });\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"    });\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    \r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Gagal memperbarui buku. Id tidak ditemukan');\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "        {\r\n            \"name\": \"maripoca\",\r\n            \"year\": 2019,\r\n            \"author\": \"luluk\",\r\n            \"summary\": \"anu1\",\r\n            \"publisher\": \"anu\",\r\n            \"pageCount\": 100,\r\n            \"readPage\": 100,\r\n            \"finished\": true,\r\n            \"reading\": 100\r\n        }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books/h3bh3dh3vvd3",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"h3bh3dh3vvd3"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Delete Book with Correct Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"    });\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"    });\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    \r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil dihapus');\r",
							"    \r",
							"    pm.test('when get detail books', () => {\r",
							"        pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books/${pm.environment.get('bookId')}`, (error, response) => {\r",
							"            pm.test('The book should be not found', () => {\r",
							"            pm.expect(response.code).to.equals(404);\r",
							"            });\r",
							"            });\r",
							"            });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Delete Finished book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"    });\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"    });\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    \r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"    pm.expect(responseJson.message).to.equals('Buku berhasil dihapus');});\r",
							"\r",
							"pm.test('when get detail books', () => {\r",
							"    pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books/${pm.environment.get('bookIdWithFinishedReading')}`, (error, response) => {\r",
							"        pm.test('The book should be not found', () => {\r",
							"        pm.expect(response.code).to.equals(404);\r",
							"        }); \r",
							"        });\r",
							"        });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:9000/books/{{bookId}}",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Mandatory] Delete Book with Invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 404', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"    });\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"    });\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"    });\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.haveOwnProperty('status');\r",
							"    pm.expect(responseJson).to.haveOwnProperty('message');\r",
							"    pm.expect(responseJson.status).to.equals('fail');\r",
							"    pm.expect(responseJson.message).to.equals('Buku gagal dihapus. Id tidak ditemukan');\r",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:9000/books/ygedyhbe",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books",
						"ygedyhbe"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Reading and Finished Book",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"mariposa\",\r\n    \"year\": 2019,\r\n    \"author\": \"luluk\",\r\n    \"summary\": \"anu\",\r\n    \"publisher\": \"anu\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 100,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Reading and Unfinished Book with \"Dicoding\" Name",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Kelas Dicoding\",\r\n    \"year\": 2019,\r\n    \"author\": \"luluk\",\r\n    \"summary\": \"anu\",\r\n    \"publisher\": \"anu\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 99,\r\n    \"reading\": true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Unreading Books and Unfinished Book \"Dicoding\" Name",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Kelas Dicoding\",\r\n    \"year\": 2019,\r\n    \"author\": \"luluk\",\r\n    \"summary\": \"anu\",\r\n    \"publisher\": \"anu\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 0,\r\n    \"reading\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Unreading Books and Unfinished Book",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Maripoca\",\r\n    \"year\": 2019,\r\n    \"author\": \"luluk\",\r\n    \"summary\": \"anu\",\r\n    \"publisher\": \"anu\",\r\n    \"pageCount\": 100,\r\n    \"readPage\": 0,\r\n    \"reading\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Optional] Get All Reading Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"    \r",
							"    pm.test('response header Content-Type should be application/json', () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"        });\r",
							"        \r",
							"        pm.test('response body should be an object', () => {\r",
							"            const responseJson = pm.response.json();\r",
							"            pm.expect(responseJson).to.be.an('object');\r",
							"            });\r",
							"            \r",
							"            pm.test('response body object should have correct property and value', () => {\r",
							"                const responsJson = pm.response.json();\r",
							"                pm.expect(responsJson).to.haveOwnProperty('status');\r",
							"                pm.expect(responsJson).to.haveOwnProperty('data');\r",
							"                \r",
							"                pm.expect(responsJson.status).to.equals('success');\r",
							"                pm.expect(responsJson.data).to.be.an('object');\r",
							"                });\r",
							"                \r",
							"                pm.test('response body data object should have a array books and contains 2 items', () => {\r",
							"                    const responseJson = pm.response.json();\r",
							"                    const { data } = responseJson;\r",
							"                    \r",
							"                    pm.expect(data).to.haveOwnProperty('books');\r",
							"                    pm.expect(data.books).to.be.an('array');\r",
							"                    pm.expect(data.books).to.lengthOf(2);\r",
							"                    });\r",
							"                    \r",
							"                    pm.test('the books should have contains only id, name, and publisher property', () => {\r",
							"                        const responseJson = pm.response.json();\r",
							"                        const { data: { books } } = responseJson;\r",
							"                        \r",
							"                        books.forEach((book) => {\r",
							"                            pm.expect(Object.keys(book)).to.lengthOf(3);\r",
							"                            pm.expect(book).to.haveOwnProperty('id');\r",
							"                            pm.expect(book).to.haveOwnProperty('name');\r",
							"                            pm.expect(book).to.haveOwnProperty('publisher');\r",
							"                            });\r",
							"                            });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Unreading Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct properties and values', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.have.property('status');\r",
							"    pm.expect(responseJson).to.have.property('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.eql('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should have an array \"books\" and contain at least 2 items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.have.property('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books.length).to.be.at.least(2);\r",
							"});\r",
							"\r",
							"pm.test('the \"books\" array should only contain \"id\", \"name\", and \"publisher\" properties', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { books } } = responseJson;\r",
							"\r",
							"    books.forEach((book) => {\r",
							"        pm.expect(Object.keys(book).length).to.eql(3);\r",
							"        pm.expect(book).to.have.property('id');\r",
							"        pm.expect(book).to.have.property('name');\r",
							"        pm.expect(book).to.have.property('publisher');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Optional] Get All Unfinished Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct properties and values', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.have.property('status');\r",
							"    pm.expect(responseJson).to.have.property('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should have an array \"books\" and contain exactly 3 items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.have.property('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books).to.have.lengthOf(3);\r",
							"});\r",
							"\r",
							"pm.test('the \"books\" should only contain \"id\", \"name\", and \"publisher\" properties', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { books } } = responseJson;\r",
							"\r",
							"    books.forEach((book) => {\r",
							"        pm.expect(Object.keys(book)).to.have.lengthOf(3);\r",
							"        pm.expect(book).to.have.property('id');\r",
							"        pm.expect(book).to.have.property('name');\r",
							"        pm.expect(book).to.have.property('publisher');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "[Optional] Get All Books Contains \"Dicoding\" Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code should be 200', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response header Content-Type should be application/json', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body object should have correct properties and values', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.have.property('status');\r",
							"    pm.expect(responseJson).to.have.property('data');\r",
							"\r",
							"    pm.expect(responseJson.status).to.equal('success');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data object should have an array \"books\" and contain exactly 2 items', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.have.property('books');\r",
							"    pm.expect(data.books).to.be.an('array');\r",
							"    pm.expect(data.books).to.have.lengthOf(2);\r",
							"});\r",
							"\r",
							"pm.test('the \"books\" should only contain \"id\", \"name\", and \"publisher\" properties', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { books } } = responseJson;\r",
							"\r",
							"    books.forEach((book) => {\r",
							"        pm.expect(Object.keys(book)).to.have.lengthOf(3);\r",
							"        pm.expect(book).to.have.property('id');\r",
							"        pm.expect(book).to.have.property('name');\r",
							"        pm.expect(book).to.have.property('publisher');\r",
							"    });\r",
							"});\r",
							"\r",
							"const deleteAllBooks = () => {\r",
							"    pm.sendRequest(`http://localhost:${pm.environment.get('port')}/books`, (error, response) => {\r",
							"        if (error) {\r",
							"            console.log('Failed to fetch books for deletion');\r",
							"            return;\r",
							"        }\r",
							"        const responseJson = response.json();\r",
							"        const { data: { books } } = responseJson;\r",
							"\r",
							"        books.forEach(({ id }) => {\r",
							"            const deleteRequest = {\r",
							"                url: `http://localhost:${pm.environment.get('port')}/books/${id}`,\r",
							"                method: 'DELETE',\r",
							"            };\r",
							"\r",
							"            pm.sendRequest(deleteRequest, (error, response) => {\r",
							"                if (error) {\r",
							"                    console.log(`Failed to delete book ${id}`);\r",
							"                    return;\r",
							"                }\r",
							"                console.log(`Book ${id} deleted`);\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"};\r",
							"\r",
							"deleteAllBooks();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:9000/books",
					"host": [
						"localhost"
					],
					"port": "9000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		}
	]
}